2023.05.08

class 문 밖에 올수 있는 자바의 선언문 두가지

import , 패키지

.java라는 파일을 실행시키기 위해 녹색버튼 누르는데 그게 두단계를 거침
1. 컴파일하면 클래스파일 생성 -> jvm 메모리가 알수있는 유니코드 체계의 프로그램으로 변함 (컴퓨터가 알 수 있는 특정한 언어체계)
2. jvm 에서 한줄한줄 읽어서 실행 (인터프리터)

- jvm 에 의해서 실행되어질 수 있는 파일이 API에 저장되어 있음

- * 쓰면 util 패키지 밑의 패키지를 모두 import 함 (import java.util.Scanner;)
	* 써서 한꺼번에 가져오지 말고, 하나씩 파일명 기술해서 하나씩 불러다가 씀.java.util.Scanner
	 -> 유틸 패키지의 스캐너 클래스를 사용하고 있다는 의미 (가독성 o)

- sc. 까지 치면 -- sc 클래스가 가지고 있는 하위 멤버 변수들 중 선택  문자열로 입력 -> 정수로 형변환 하거나 / 아예 정수형 사용 
- 공백에 의해 구분되어 지는 것들이 sc. 치면 하위 멤버 변수들 나오는 것

- nextline 문자열로 입력을 받기 때문에 숫자인 경우에는 반드시 숫자로 변환해야함 
	이때는 래퍼(wrapper)라는 클래스 객체 사용함



----------------
- 주기억장치에 적재되어야함 ( 적재되는 현상 : 로드  road)
- 컴퓨터에서 고화질의 사진 띄우거나 인터넷에서 다운받을때 
- 하드디스크나 외부 기억장치에 있는 프로그램을 실행시키기 위해서는 프로그램이 주기억장치에 로드(Road) 되어야함
	(작은곳에 큰 프로그램이 적재되기엔 힘들기 때문에 쪼개거나(segment) 나눠놓음 (페이징기법) -> 주기억장치에 갖다놓음)
	(이 기법들이 실행되는 이유는 프로그램 실행 위해서는 주기억장치에 배정받아야함)
- static 이라는 예약어 (자바프로그램도 메모리에 적재, 로딩되어야함)
- new라는 연산자가 나와야 객체가 만들어짐(실행가능한 객체) 
	- 적재되어질 때는 실행 한참 전

- static 이 붙은 것 - 초기화 블록, 메소드, 변수에 static 붙을 수 있음
	특징 : 
	(1) 만들어지는 시점이 프로그램이 로드되어질때 적재됨 
	(2) 만들어지는 갯수가 클래스의 갯수가 수없이 만들어져도 기억장소에 딱 한번만들어짐 (메소드 영역에)
 		초기화도 로드되어질 때 한번 됨

ex)



- 지역변수 : 메소드 안에서 선언되어지는 변수
	그 변수가 사용되어질 때 만들어짐 - 자기가 선언되어진 블록을 벗어날 때 소멸됨 (메소드를 벗어나거나)
	명령문에서 사용되어진 변수는 명령문 종료 시 소멸됨
- 전역변수 (static)
- ★ 멤버변수 : 클래스 안쪽 메소드 바깥쪽에서 선언되어진 변수 ★
	클래스가 생성되어질 때
	클래스가 기억공간을 잃어버릴 때 (클래스와 같은 기간동안 존재함)
	- 클래스의 객체가 생성될 때마다 (객체가 생성될때마다) 생성됨
	new - 힙 메모리에 공간을 만들 때마다 prod_id 만들어짐 -> 만들어질때마다 초기화됨
- ★★★★★★★ 클래스명과 똑같은 메소드 -  ★생성자 메소드 (멤버필드 초기화) ★★★★★★★★
	클래스 객체를 초기화할 때 만들어짐
	[클래스 초기화 방법 3가지]
	- 초기화 메소드를 사용하는 방법 (생성자 메소드 /  주로 사용하는 방법) - 다양성 확보 (?)
	- 직접 값을 부여 (직접초기화, = 사용)
	- 초기화 블록을 사용하는 방법 (브레이스?)

- ★ 메소드에만 ( ) 붙음
- heap 메모리에 new 연산자에 의해서 기억공간을 확보 - 클래스
